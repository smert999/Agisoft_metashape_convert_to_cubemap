# === –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –°–ö–†–ò–ü–¢: –°—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ ‚Üí –ö—É–±–∏—á–µ—Å–∫–∏–µ ‚Üí 3DGS ===
# –°–æ–∑–¥–∞–µ—Ç –∫—É–±–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏ –∏–∑ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–µ—Ä —Å –ü–†–ê–í–ò–õ–¨–ù–û–ô –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π
# –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤ COLMAP —Ñ–æ—Ä–º–∞—Ç –¥–ª—è 3D Gaussian Splatting
# –í–ï–†–°–ò–Ø: 2.0 - –í–°–ï –ë–ê–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!

import os
import shutil
import struct
import math
import numpy as np
import cv2
import Metashape
import concurrent.futures
import time
import gc

print("=== üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Unified Spherical to 3DGS Converter ===")
print("–í–µ—Ä—Å–∏—è: 2.0 - –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –ì–ï–û–ú–ï–¢–†–ò–ò –ò –¶–í–ï–¢–û–í –ò–°–ü–†–ê–í–õ–ï–ù–´!")

# === –ö–û–ù–°–¢–ê–ù–¢–´ ===
CAMERA_MODEL_IDS = {
    'SIMPLE_PINHOLE': 0,
    'PINHOLE': 1,
    'SIMPLE_RADIAL': 2,
    'RADIAL': 3,
    'OPENCV': 4,
    'OPENCV_FISHEYE': 5,
    'FULL_OPENCV': 6,
    'FOV': 7,
    'SIMPLE_RADIAL_FISHEYE': 8,
    'RADIAL_FISHEYE': 9,
    'THIN_PRISM_FISHEYE': 10
}

# === –ü–†–ê–í–ò–õ–¨–ù–´–ï –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –£–¢–ò–õ–ò–¢–´ ===
def normalize_vector(v):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–µ–∫—Ç–æ—Ä"""
    v = np.array(v, dtype=float)
    norm = np.linalg.norm(v)
    return v / norm if norm > 1e-8 else v

def rotation_matrix_to_quaternion(R):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ quaternion (qw, qx, qy, qz) –¥–ª—è COLMAP"""
    if not isinstance(R, np.ndarray):
        R = np.array(R, dtype=float)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –º–∞—Ç—Ä–∏—Ü–∞ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–∞—è
    trace = np.trace(R)
    
    if trace > 0:
        s = 0.5 / np.sqrt(trace + 1.0)
        qw = 0.25 / s
        qx = (R[2, 1] - R[1, 2]) * s
        qy = (R[0, 2] - R[2, 0]) * s
        qz = (R[1, 0] - R[0, 1]) * s
    else:
        if R[0, 0] > R[1, 1] and R[0, 0] > R[2, 2]:
            s = 2.0 * np.sqrt(1.0 + R[0, 0] - R[1, 1] - R[2, 2])
            qw = (R[2, 1] - R[1, 2]) / s
            qx = 0.25 * s
            qy = (R[0, 1] + R[1, 0]) / s
            qz = (R[0, 2] + R[2, 0]) / s
        elif R[1, 1] > R[2, 2]:
            s = 2.0 * np.sqrt(1.0 + R[1, 1] - R[0, 0] - R[2, 2])
            qw = (R[0, 2] - R[2, 0]) / s
            qx = (R[0, 1] + R[1, 0]) / s
            qy = 0.25 * s
            qz = (R[1, 2] + R[2, 1]) / s
        else:
            s = 2.0 * np.sqrt(1.0 + R[2, 2] - R[0, 0] - R[1, 1])
            qw = (R[1, 0] - R[0, 1]) / s
            qx = (R[0, 2] + R[2, 0]) / s
            qy = (R[1, 2] + R[2, 1]) / s
            qz = 0.25 * s
    
    quat = np.array([qw, qx, qy, qz], dtype=float)
    quat = quat / np.linalg.norm(quat)
    return quat.tolist()

# === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò ===
def read_image_safe(path):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
    try:
        # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å —á–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä
        if os.name == 'nt':
            with open(path, 'rb') as f:
                img_content = bytearray(f.read())
            np_arr = np.asarray(img_content, dtype=np.uint8)
            return cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
        else:
            return cv2.imread(path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {path}: {e}")
        return None

def save_image_safe(image, path, params=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        
        if os.name == 'nt':  # Windows
            ext = os.path.splitext(path)[1].lower()
            encode_param = params if params else []
            success, buffer = cv2.imencode(ext, image, encode_param)
            if success:
                with open(path, 'wb') as f:
                    f.write(buffer)
                return True
            return False
        else:
            return cv2.imwrite(path, image, params if params else [])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {path}: {e}")
        return False

# === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –≠–ö–í–ò–†–ï–ö–¢–ê–ù–ì–£–õ–Ø–†–ù–û–ô –ü–†–û–ï–ö–¶–ò–ò ===
def equirectangular_to_cubemap_face_FIXED(equirect_image, face_name, face_size, fov=90, overlap=10):
    """
    –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —ç–∫–≤–∏—Ä–µ–∫—Ç–∞–Ω–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ –≤ –≥—Ä–∞–Ω—å –∫—É–±–∞
    
    Args:
        equirect_image: –∏—Å—Ö–æ–¥–Ω–æ–µ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        face_name: –∏–º—è –≥—Ä–∞–Ω–∏ ('front', 'back', 'left', 'right', 'top', 'down')
        face_size: —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ)
        fov: –±–∞–∑–æ–≤–æ–µ –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
        overlap: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    
    Returns:
        perspective_image: —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏
    """
    
    if equirect_image is None:
        return None
    
    eq_height, eq_width = equirect_image.shape[:2]
    
    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
    effective_fov = fov + overlap
    half_fov_rad = np.radians(effective_fov / 2)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    face_coords = np.mgrid[0:face_size, 0:face_size].astype(np.float32)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-1, 1]
    # y –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤–Ω–∏–∑ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –Ω–æ –≤–≤–µ—Ä—Ö –≤ 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
    x_norm = (face_coords[1] - face_size/2) / (face_size/2)  # -1..1 —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
    y_norm = -(face_coords[0] - face_size/2) / (face_size/2)  # -1..1 —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö (–∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Y!)
    
    # –ü—Ä–æ–µ—Ü–∏—Ä—É–µ–º –Ω–∞ –µ–¥–∏–Ω–∏—á–Ω—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –∫–∞–º–µ—Ä–æ–π
    tan_half_fov = np.tan(half_fov_rad)
    x_plane = x_norm * tan_half_fov
    y_plane = y_norm * tan_half_fov
    z_plane = np.ones_like(x_plane)
    
    # –ü–†–ê–í–ò–õ–¨–ù–´–ï –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≥—Ä–∞–Ω–µ–π –∫—É–±–∞
    # –í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (Y –≤–≤–µ—Ä—Ö, Z –≤–ø–µ—Ä–µ–¥, X –≤–ø—Ä–∞–≤–æ)
    if face_name == 'front':
        # –°–º–æ—Ç—Ä–∏–º –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ +Z
        x_world = x_plane   # X –æ—Å—Ç–∞–µ—Ç—Å—è X
        y_world = y_plane   # Y –æ—Å—Ç–∞–µ—Ç—Å—è Y  
        z_world = z_plane   # Z = +1 (–≤–ø–µ—Ä–µ–¥)
        
    elif face_name == 'back':
        # –°–º–æ—Ç—Ä–∏–º –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ -Z (–ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 180¬∞ –≤–æ–∫—Ä—É–≥ Y)
        x_world = -x_plane  # X –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
        y_world = y_plane   # Y –æ—Å—Ç–∞–µ—Ç—Å—è Y
        z_world = -z_plane  # Z = -1 (–Ω–∞–∑–∞–¥)
        
    elif face_name == 'right':
        # –°–º–æ—Ç—Ä–∏–º –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ +X (–ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90¬∞ –≤–ø—Ä–∞–≤–æ –≤–æ–∫—Ä—É–≥ Y)
        x_world = z_plane   # Z —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è X
        y_world = y_plane   # Y –æ—Å—Ç–∞–µ—Ç—Å—è Y
        z_world = -x_plane  # -X —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è Z
        
    elif face_name == 'left':
        # –°–º–æ—Ç—Ä–∏–º –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ -X (–ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90¬∞ –≤–ª–µ–≤–æ –≤–æ–∫—Ä—É–≥ Y)
        x_world = -z_plane  # -Z —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è X
        y_world = y_plane   # Y –æ—Å—Ç–∞–µ—Ç—Å—è Y  
        z_world = x_plane   # X —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è Z
        
    elif face_name == 'top':
        # –°–º–æ—Ç—Ä–∏–º –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ +Y (–ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90¬∞ –≤–≤–µ—Ä—Ö –≤–æ–∫—Ä—É–≥ X)
        x_world = x_plane   # X –æ—Å—Ç–∞–µ—Ç—Å—è X
        y_world = -z_plane  # -Z —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è Y (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –∑–Ω–∞–∫–∞)
        z_world = y_plane   # Y —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è Z (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –∑–Ω–∞–∫–∞)
        
    elif face_name == 'down':
        # –°–º–æ—Ç—Ä–∏–º –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ -Y (–ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90¬∞ –≤–Ω–∏–∑ –≤–æ–∫—Ä—É–≥ X)
        x_world = x_plane   # X –æ—Å—Ç–∞–µ—Ç—Å—è X
        y_world = z_plane   # Z —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è Y (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –∑–Ω–∞–∫–∞)
        z_world = -y_plane  # -Y —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è Z (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –∑–Ω–∞–∫–∞)
        
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä–∞–Ω—å: {face_name}")
        return None
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ –≤–µ–∫—Ç–æ—Ä—ã
    norm = np.sqrt(x_world**2 + y_world**2 + z_world**2)
    x_world = x_world / norm
    y_world = y_world / norm  
    z_world = z_world / norm
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º 3D –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    # longitude: –∞–∑–∏–º—É—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-œÄ, œÄ]
    longitude = np.arctan2(x_world, z_world)
    
    # latitude: –≤—ã—Å–æ—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-œÄ/2, œÄ/2]
    latitude = np.arcsin(np.clip(y_world, -1, 1))
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–∫–≤–∏—Ä–µ–∫—Ç–∞–Ω–≥—É–ª—è—Ä–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # longitude: -œÄ..œÄ -> 0..eq_width
    eq_x = ((longitude + np.pi) / (2 * np.pi)) * eq_width
    
    # latitude: -œÄ/2..œÄ/2 -> eq_height..0 (–∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏)
    eq_y = ((np.pi/2 - latitude) / np.pi) * eq_height
    
    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å –ø–æ X (—ç–∫–≤–∏—Ä–µ–∫—Ç–∞–Ω–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è —Ü–∏–∫–ª–∏—á–Ω–∞ –ø–æ –¥–æ–ª–≥–æ—Ç–µ)
    eq_x = eq_x % eq_width
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    eq_y = np.clip(eq_y, 0, eq_height - 1)
    
    # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    perspective_image = cv2.remap(
        equirect_image,
        eq_x.astype(np.float32),
        eq_y.astype(np.float32),
        cv2.INTER_CUBIC,
        borderMode=cv2.BORDER_WRAP  # –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ X
    )
    
    return perspective_image

# === –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¶–í–ï–¢–ù–û–ì–û –û–ë–õ–ê–ö–ê ===
def extract_colored_point_cloud_FIXED(chunk, max_points=None):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ–≥–æ –æ–±–ª–∞–∫–∞ –∏–∑ Metashape
    –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ü–≤–µ—Ç–æ–≤
    """
    print("=== üé® –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ–≥–æ –æ–±–ª–∞–∫–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è) ===")
    
    if not chunk.tie_points:
        print("‚ùå –†–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ–µ –æ–±–ª–∞–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        return {}
    
    points3D = {}
    total_points = len(chunk.tie_points.points)
    valid_points = 0
    colored_points = 0
    
    print(f"üìä –í—Å–µ–≥–æ —Ç–æ—á–µ–∫ –≤ –æ–±–ª–∞–∫–µ: {total_points}")
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if max_points and total_points > max_points:
        step = max(1, total_points // max_points)
        print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∂–¥—É—é {step}-—é —Ç–æ—á–∫—É (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {max_points})")
    else:
        step = 1
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    color_formats_found = set()
    
    for point_idx, point in enumerate(chunk.tie_points.points):
        if not point.valid:
            continue
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if step > 1 and (point_idx % step != 0):
            continue
            
        valid_points += 1
        point3D_id = point_idx + 1  # COLMAP –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 1-based –∏–Ω–¥–µ–∫—Å—ã
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏
        coord = point.coord
        xyz = [float(coord.x), float(coord.y), float(coord.z)]
        
        # === –ü–†–ê–í–ò–õ–¨–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¶–í–ï–¢–ê ===
        rgb = [128, 128, 128]  # –°–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        color_found = False
        
        try:
            # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ point.color
            if hasattr(point, 'color') and point.color is not None:
                color = point.color
                color_formats_found.add(f"point.color: {type(color)}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ü–≤–µ—Ç–æ–≤
                if isinstance(color, (list, tuple, np.ndarray)) and len(color) >= 3:
                    # –°–ø–∏—Å–æ–∫/–º–∞—Å—Å–∏–≤ —Ü–≤–µ—Ç–æ–≤
                    max_val = max(color[:3])
                    if max_val <= 1.0:
                        # –¶–≤–µ—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]
                        rgb = [int(255 * c) for c in color[:3]]
                    elif max_val <= 255.0:
                        # –¶–≤–µ—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 255]
                        rgb = [int(c) for c in color[:3]]
                    else:
                        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω - –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
                        rgb = [int(255 * c / max_val) for c in color[:3]]
                    color_found = True
                    
                elif hasattr(color, '__len__') and len(color) >= 3:
                    # –û–±—ä–µ–∫—Ç —Å –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
                    try:
                        color_list = list(color[:3])
                        max_val = max(color_list)
                        if max_val <= 1.0:
                            rgb = [int(255 * c) for c in color_list]
                        else:
                            rgb = [int(c) for c in color_list]
                        color_found = True
                    except:
                        pass
                
                # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —Ü–≤–µ—Ç–∞ –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º
                if not color_found and hasattr(color, 'r') and hasattr(color, 'g') and hasattr(color, 'b'):
                    try:
                        r, g, b = color.r, color.g, color.b
                        if max(r, g, b) <= 1.0:
                            rgb = [int(255 * r), int(255 * g), int(255 * b)]
                        else:
                            rgb = [int(r), int(g), int(b)]
                        color_found = True
                        color_formats_found.add("point.color.rgb attributes")
                    except:
                        pass
            
            # –ú–µ—Ç–æ–¥ 2: –î–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ track (–µ—Å–ª–∏ point.color –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
            if not color_found and hasattr(chunk.tie_points, 'tracks') and point_idx < len(chunk.tie_points.tracks):
                try:
                    track = chunk.tie_points.tracks[point_idx]
                    if hasattr(track, 'color') and track.color is not None:
                        track_color = track.color
                        color_formats_found.add(f"track.color: {type(track_color)}")
                        
                        if isinstance(track_color, (list, tuple, np.ndarray)) and len(track_color) >= 3:
                            max_val = max(track_color[:3])
                            if max_val <= 1.0:
                                rgb = [int(255 * c) for c in track_color[:3]]
                            else:
                                rgb = [int(c) for c in track_color[:3]]
                            color_found = True
                except:
                    pass
            
            # –ú–µ—Ç–æ–¥ 3: –ü—Ä—è–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã —Ç–æ—á–∫–∏ (red, green, blue)
            if not color_found:
                if (hasattr(point, 'red') and hasattr(point, 'green') and hasattr(point, 'blue')):
                    try:
                        r, g, b = point.red, point.green, point.blue
                        rgb = [int(r), int(g), int(b)]
                        color_found = True
                        color_formats_found.add("point.red/green/blue")
                    except:
                        pass
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            rgb = [max(0, min(255, int(c))) for c in rgb]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–µ—Ä—ã–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if color_found and not (rgb[0] == rgb[1] == rgb[2] and 120 <= rgb[0] <= 135):
                colored_points += 1
            
        except Exception as e:
            if valid_points <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç–æ—á–µ–∫
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–æ—á–∫–∏ {point_idx}: {e}")
        
        # –û—à–∏–±–∫–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        error = 0.0
        if hasattr(point, 'error'):
            try:
                error = float(point.error)
            except:
                error = 0.0
        
        points3D[point3D_id] = {
            'xyz': xyz,
            'rgb': rgb,
            'error': error,
            'image_ids': [],      # –ü—É—Å—Ç–æ–π –¥–ª—è 3DGS
            'point2D_idxs': []    # –ü—É—Å—Ç–æ–π –¥–ª—è 3DGS
        }
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ü–≤–µ—Ç–æ–≤: {color_formats_found}")
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ—á–µ–∫: {len(points3D)}")
    print(f"üìä –í–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—á–µ–∫: {valid_points}")
    print(f"üé® –¶–≤–µ—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫: {colored_points}")
    print(f"‚ö™ –°–µ—Ä—ã—Ö —Ç–æ—á–µ–∫: {valid_points - colored_points}")
    
    color_ratio = colored_points / valid_points if valid_points > 0 else 0
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Ü–≤–µ—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫: {color_ratio:.1%}")
    
    if color_ratio < 0.3:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ —Ü–≤–µ—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫!")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: Tools -> Dense Cloud -> Calculate Point Colors")
    elif color_ratio < 0.7:
        print("‚ö†Ô∏è  –¶–≤–µ—Ç–Ω–æ—Å—Ç—å –æ–±–ª–∞–∫–∞ –ø—Ä–∏–µ–º–ª–µ–º–∞—è, –Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å")
    else:
        print("‚úÖ –¶–≤–µ—Ç–Ω–æ—Å—Ç—å –æ–±–ª–∞–∫–∞ –æ—Ç–ª–∏—á–Ω–∞—è")
    
    return points3D

# === –ó–ê–ü–ò–°–¨ COLMAP –§–ê–ô–õ–û–í ===
def write_cameras_binary(cameras, path):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç cameras.bin –≤ COLMAP —Ñ–æ—Ä–º–∞—Ç–µ"""
    with open(path, "wb") as f:
        f.write(struct.pack("Q", len(cameras)))
        for camera_id, camera in cameras.items():
            f.write(struct.pack("I", camera_id))
            f.write(struct.pack("i", camera['model_id']))
            f.write(struct.pack("Q", camera['width']))
            f.write(struct.pack("Q", camera['height']))
            for param in camera['params']:
                f.write(struct.pack("d", param))

def write_images_binary(images, path):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç images.bin –≤ COLMAP —Ñ–æ—Ä–º–∞—Ç–µ"""
    with open(path, "wb") as f:
        f.write(struct.pack("Q", len(images)))
        for image_id, image in images.items():
            f.write(struct.pack("I", image_id))
            for val in image['qvec']:
                f.write(struct.pack("d", val))
            for val in image['tvec']:
                f.write(struct.pack("d", val))
            f.write(struct.pack("I", image['camera_id']))
            name_bytes = image['name'].encode('utf-8') + b'\x00'
            f.write(name_bytes)
            f.write(struct.pack("Q", len(image['xys'])))
            for xy, point3D_id in zip(image['xys'], image['point3D_ids']):
                f.write(struct.pack("d", xy[0]))
                f.write(struct.pack("d", xy[1]))
                f.write(struct.pack("Q", point3D_id))

def write_points3D_binary(points3D, path):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç points3D.bin –≤ COLMAP —Ñ–æ—Ä–º–∞—Ç–µ"""
    with open(path, "wb") as f:
        f.write(struct.pack("Q", len(points3D)))
        for point3D_id, point in points3D.items():
            f.write(struct.pack("Q", point3D_id))
            for coord in point['xyz']:
                f.write(struct.pack("d", coord))
            for color in point['rgb']:
                f.write(struct.pack("B", color))
            f.write(struct.pack("d", point['error']))
            f.write(struct.pack("Q", len(point['image_ids'])))
            for image_id, point2D_idx in zip(point['image_ids'], point['point2D_idxs']):
                f.write(struct.pack("I", image_id))
                f.write(struct.pack("I", point2D_idx))

# === –ü–†–û–ì–†–ï–°–° –¢–†–ï–ö–ï–† ===
class ProgressTracker:
    """–ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏"""
    
    def __init__(self, title="Spherical to 3DGS FIXED"):
        self.title = title
        self.start_time = time.time()
        self.stage_start = time.time()
    
    def update(self, current, total, message="", stage_change=False):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        if stage_change:
            self.stage_start = time.time()
        
        percent = int((current / total) * 100) if total > 0 else 0
        elapsed = time.time() - self.start_time
        
        # –û—Ü–µ–Ω–∫–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
        if current > 0:
            estimated_total = elapsed * (total / current)
            remaining = max(0, estimated_total - elapsed)
            if remaining < 60:
                time_str = f" | –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.0f}—Å"
            elif remaining < 3600:
                time_str = f" | –û—Å—Ç–∞–ª–æ—Å—å: {remaining/60:.1f}–º–∏–Ω"
            else:
                time_str = f" | –û—Å—Ç–∞–ª–æ—Å—å: {remaining/3600:.1f}—á"
        else:
            time_str = ""
        
        status = f"üìä [{percent:3d}%] {message}{time_str}"
        print(status)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º GUI Metashape –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            if hasattr(Metashape.app, 'update'):
                Metashape.app.update()
        except:
            pass

# === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ö–£–ë–ò–ß–ï–°–ö–ò–• –ö–ê–ú–ï–† ===
def create_cubemap_cameras_FIXED(chunk, spherical_camera, face_images_paths, face_size, overlap=10):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–±–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–µ—Ä –≤ Metashape
    –°–æ–∑–¥–∞–µ—Ç 6 –∫–∞–º–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è–º–∏
    
    Args:
        chunk: Metashape.Chunk
        spherical_camera: –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∞—è –∫–∞–º–µ—Ä–∞
        face_images_paths: —Å–ª–æ–≤–∞—Ä—å –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≥—Ä–∞–Ω–µ–π
        face_size: —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥—Ä–∞–Ω–µ–π
        overlap: –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    
    Returns:
        list: —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä
    """
    print(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–µ—Ä –¥–ª—è {spherical_camera.label}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–π –∫–∞–º–µ—Ä—ã
    camera_center = spherical_camera.center
    camera_transform = spherical_camera.transform
    
    # –ë–∞–∑–æ–≤–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–π –∫–∞–º–µ—Ä—ã
    base_rotation = camera_transform.rotation()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä—ã —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
    effective_fov = 90 + overlap
    focal_length = face_size / (2 * np.tan(np.radians(effective_fov / 2)))
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–Ω—Å–æ—Ä
    sensor = None
    for existing_sensor in chunk.sensors:
        if (existing_sensor.type == Metashape.Sensor.Type.Frame and
            existing_sensor.width == face_size and
            existing_sensor.height == face_size and
            abs(existing_sensor.calibration.f - focal_length) < 1.0):
            sensor = existing_sensor
            break
    
    if sensor is None:
        sensor = chunk.addSensor()
        sensor.label = f"Cubemap_{face_size}px_fov{effective_fov:.0f}"
        sensor.type = Metashape.Sensor.Type.Frame
        sensor.width = face_size
        sensor.height = face_size
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        calibration = sensor.calibration
        calibration.f = focal_length
        calibration.cx = 0.0  # –¶–µ–Ω—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        calibration.cy = 0.0
        calibration.k1 = 0.0  # –ë–µ–∑ –¥–∏—Å—Ç–æ—Ä—Å–∏–∏
        calibration.k2 = 0.0
        calibration.k3 = 0.0
        calibration.p1 = 0.0
        calibration.p2 = 0.0
    
    # –ü–†–ê–í–ò–õ–¨–ù–´–ï –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç Metashape (Y –≤–≤–µ—Ä—Ö, Z –≤–ø–µ—Ä–µ–¥)
    face_directions = {
        'front': {
            'forward': Metashape.Vector([0, 0, 1]),    # –í–ø–µ—Ä–µ–¥ –ø–æ Z
            'up': Metashape.Vector([0, 1, 0]),         # –í–≤–µ—Ä—Ö –ø–æ Y
            'right': Metashape.Vector([1, 0, 0])       # –í–ø—Ä–∞–≤–æ –ø–æ X
        },
        'back': {
            'forward': Metashape.Vector([0, 0, -1]),   # –ù–∞–∑–∞–¥ –ø–æ -Z
            'up': Metashape.Vector([0, 1, 0]),         # –í–≤–µ—Ä—Ö –ø–æ Y
            'right': Metashape.Vector([-1, 0, 0])      # –í–ø—Ä–∞–≤–æ –ø–æ -X (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ!)
        },
        'right': {
            'forward': Metashape.Vector([1, 0, 0]),    # –í–ø—Ä–∞–≤–æ –ø–æ X
            'up': Metashape.Vector([0, 1, 0]),         # –í–≤–µ—Ä—Ö –ø–æ Y
            'right': Metashape.Vector([0, 0, -1])      # –í–ø—Ä–∞–≤–æ –ø–æ -Z
        },
        'left': {
            'forward': Metashape.Vector([-1, 0, 0]),   # –í–ª–µ–≤–æ –ø–æ -X
            'up': Metashape.Vector([0, 1, 0]),         # –í–≤–µ—Ä—Ö –ø–æ Y
            'right': Metashape.Vector([0, 0, 1])       # –í–ø—Ä–∞–≤–æ –ø–æ Z
        },
        'top': {
            'forward': Metashape.Vector([0, 1, 0]),    # –í–≤–µ—Ä—Ö –ø–æ Y
            'up': Metashape.Vector([0, 0, -1]),        # "–í–≤–µ—Ä—Ö" –ø–æ -Z (–æ—Ç –∫–∞–º–µ—Ä—ã)
            'right': Metashape.Vector([1, 0, 0])       # –í–ø—Ä–∞–≤–æ –ø–æ X
        },
        'down': {
            'forward': Metashape.Vector([0, -1, 0]),   # –í–Ω–∏–∑ –ø–æ -Y
            'up': Metashape.Vector([0, 0, 1]),         # "–í–≤–µ—Ä—Ö" –ø–æ Z (–æ—Ç –∫–∞–º–µ—Ä—ã)
            'right': Metashape.Vector([1, 0, 0])       # –í–ø—Ä–∞–≤–æ –ø–æ X
        }
    }
    
    created_cameras = []
    
    for face_name, image_path in face_images_paths.items():
        if face_name not in face_directions:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –≥—Ä–∞–Ω—å: {face_name}")
            continue
        
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞–º–µ—Ä—É
            camera = chunk.addCamera()
            camera.label = f"{spherical_camera.label}_{face_name}"
            camera.sensor = sensor
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ
            camera.photo = Metashape.Photo()
            camera.photo.path = image_path
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä–∞–Ω–∏
            directions = face_directions[face_name]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–π –∫–∞–º–µ—Ä—ã –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –≥—Ä–∞–Ω–∏
            world_forward = base_rotation * directions['forward']
            world_up = base_rotation * directions['up']
            world_right = base_rotation * directions['right']
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
            # –í Metashape: —Å—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã = –æ—Å–∏ –∫–∞–º–µ—Ä—ã –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
            rotation_matrix = Metashape.Matrix([
                [world_right.x, world_right.y, world_right.z],   # X-–æ—Å—å –∫–∞–º–µ—Ä—ã
                [world_up.x, world_up.y, world_up.z],            # Y-–æ—Å—å –∫–∞–º–µ—Ä—ã
                [world_forward.x, world_forward.y, world_forward.z] # Z-–æ—Å—å –∫–∞–º–µ—Ä—ã (–≤–ø–µ—Ä–µ–¥)
            ])
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:
            # –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é (–ø–µ—Ä–µ–Ω–æ—Å), –∑–∞—Ç–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
            camera.transform = Metashape.Matrix.Translation(camera_center) * Metashape.Matrix.Rotation(rotation_matrix)
            
            created_cameras.append(camera)
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞–º–µ—Ä–∞: {camera.label}")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã {face_name}: {e}")
            continue
    
    print(f"üéØ –°–æ–∑–¥–∞–Ω–æ {len(created_cameras)} –∫—É–±–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–µ—Ä")
    return created_cameras

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê ===
def process_spherical_to_cubemap_3dgs_FIXED(chunk, output_folder, face_size=None, overlap=10, 
                                           file_format="jpg", quality=95, max_points=50000,
                                           face_threads=6, camera_threads=None, progress_tracker=None):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–æ–∑–¥–∞–µ—Ç –∫—É–±–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏ –∏–∑ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–µ—Ä
    —Å –ü–†–ê–í–ò–õ–¨–ù–û–ô –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤ COLMAP –¥–ª—è 3DGS
    
    Args:
        chunk: Metashape.Chunk
        output_folder: –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        face_size: —Ä–∞–∑–º–µ—Ä –≥—Ä–∞–Ω–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (None = –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        overlap: –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –≥—Ä–∞–Ω–µ–π –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
        file_format: —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        quality: –∫–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è (–¥–ª—è JPEG)
        max_points: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –æ–±–ª–∞–∫–∞
        face_threads: –ø–æ—Ç–æ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä–∞–Ω–µ–π –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã
        camera_threads: –ø–æ—Ç–æ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö –∫–∞–º–µ—Ä
        progress_tracker: –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    
    Returns:
        bool: —É—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    
    def update_progress(current, total, message="", stage_change=False):
        if progress_tracker:
            progress_tracker.update(current, total, message, stage_change)
        else:
            percent = int((current / total) * 100) if total > 0 else 0
            print(f"üìä [{percent:3d}%] {message}")
    
    print("=== üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –≥—Ä–∞–Ω–µ–π ===")
    print(f"üîÑ –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: {overlap}¬∞")
    print(f"üìê –†–∞–∑–º–µ—Ä –≥—Ä–∞–Ω–µ–π: {'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏' if face_size is None else f'{face_size}px'}")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    os.makedirs(output_folder, exist_ok=True)
    images_folder = os.path.join(output_folder, "images")
    os.makedirs(images_folder, exist_ok=True)
    sparse_folder = os.path.join(output_folder, "sparse", "0")
    os.makedirs(sparse_folder, exist_ok=True)
    
    # –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞–º–µ—Ä (5%)
    update_progress(5, 100, "–ê–Ω–∞–ª–∏–∑ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–µ—Ä...", stage_change=True)
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ –∫–∞–º–µ—Ä—ã (–∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫—É–±–∏—á–µ—Å–∫–∏–µ)
    cube_faces_suffixes = ["_front", "_right", "_left", "_top", "_down", "_back"]
    spherical_cameras = []
    existing_cube_cameras = []
    
    for cam in chunk.cameras:
        if cam.transform and cam.photo and cam.enabled:
            is_cube_face = any(cam.label.endswith(suffix) for suffix in cube_faces_suffixes)
            if is_cube_face:
                existing_cube_cameras.append(cam)
            else:
                spherical_cameras.append(cam)
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä:")
    print(f"   üî¥ –°—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö: {len(spherical_cameras)} (–±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã)")
    print(f"   üü¶ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—É–±–∏—á–µ—Å–∫–∏—Ö: {len(existing_cube_cameras)} (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)")
    
    if not spherical_cameras:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
        return False
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—É–±–∏—á–µ—Å–∫–∏–µ –∫–∞–º–µ—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if existing_cube_cameras:
        print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º {len(existing_cube_cameras)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—É–±–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–µ—Ä...")
        for cam in existing_cube_cameras:
            chunk.remove(cam)
    
    # –≠—Ç–∞–ø 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ –æ–±–ª–∞–∫–∞ (15%)
    update_progress(15, 100, "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ–≥–æ –æ–±–ª–∞–∫–∞...", stage_change=True)
    points3D = extract_colored_point_cloud_FIXED(chunk, max_points=max_points)
    
    # –≠—Ç–∞–ø 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ (20%)
    update_progress(20, 100, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...", stage_change=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
    if camera_threads is None:
        camera_threads = min(len(spherical_cameras), os.cpu_count() or 1)
    
    face_names = ["front", "right", "left", "top", "down", "back"]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    save_params = []
    if file_format.lower() in ["jpg", "jpeg"]:
        save_params = [cv2.IMWRITE_JPEG_QUALITY, quality]
        file_ext = "jpg"
    elif file_format.lower() == "png":
        save_params = [cv2.IMWRITE_PNG_COMPRESSION, min(9, 10 - quality//10)]
        file_ext = "png"
    else:
        save_params = [cv2.IMWRITE_JPEG_QUALITY, quality]
        file_ext = "jpg"
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è COLMAP
    cameras_colmap = {}
    images_colmap = {}
    camera_params_to_id = {}
    next_camera_id = 1
    next_image_id = 1
    
    # –≠—Ç–∞–ø 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–µ—Ä (20-60%)
    update_progress(20, 100, f"–°–æ–∑–¥–∞–Ω–∏–µ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –≥—Ä–∞–Ω–µ–π –¥–ª—è {len(spherical_cameras)} –∫–∞–º–µ—Ä...", stage_change=True)
    
    def process_single_spherical_camera_FIXED(cam_data):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–π –∫–∞–º–µ—Ä—ã"""
        cam_idx, spherical_camera = cam_data
        results = {
            'camera': spherical_camera,
            'face_images': {},
            'face_size_actual': None,
            'error': None
        }
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            spherical_image = read_image_safe(spherical_camera.photo.path)
            if spherical_image is None:
                results['error'] = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                return results
            
            eq_height, eq_width = spherical_image.shape[:2]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≥—Ä–∞–Ω–µ–π
            if face_size is None:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞
                actual_face_size = min(max(eq_width // 4, 512), 2048)
                # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–π —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏
                actual_face_size = 2 ** int(np.log2(actual_face_size) + 0.5)
            else:
                actual_face_size = face_size
            
            results['face_size_actual'] = actual_face_size
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –≥—Ä–∞–Ω–∏
            for face_name in face_names:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏ —Å –ü–†–ê–í–ò–õ–¨–ù–û–ô –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π
                    perspective_image = equirectangular_to_cubemap_face_FIXED(
                        spherical_image, 
                        face_name, 
                        actual_face_size, 
                        fov=90, 
                        overlap=overlap
                    )
                    
                    if perspective_image is None:
                        continue
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    output_filename = f"{spherical_camera.label}_{face_name}.{file_ext}"
                    output_path = os.path.join(images_folder, output_filename)
                    
                    if save_image_safe(perspective_image, output_path, save_params):
                        results['face_images'][face_name] = output_path
                    
                    # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
                    del perspective_image
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä–∞–Ω–∏ {face_name} –¥–ª—è {spherical_camera.label}: {e}")
                    continue
            
            # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            del spherical_image
            gc.collect()
            
            return results
            
        except Exception as e:
            results['error'] = str(e)
            return results
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–µ—Ä
    all_camera_results = []
    
    if camera_threads == 1:
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        for cam_idx, spherical_camera in enumerate(spherical_cameras):
            progress = 20 + int((cam_idx / len(spherical_cameras)) * 40)
            update_progress(progress, 100, f"–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞–Ω–µ–π –¥–ª—è {spherical_camera.label} ({cam_idx+1}/{len(spherical_cameras)})")
            
            results = process_single_spherical_camera_FIXED((cam_idx, spherical_camera))
            all_camera_results.append(results)
    else:
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        with concurrent.futures.ThreadPoolExecutor(max_workers=camera_threads) as executor:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
            camera_data = [(idx, cam) for idx, cam in enumerate(spherical_cameras)]
            future_to_camera = {
                executor.submit(process_single_spherical_camera_FIXED, data): data[1] 
                for data in camera_data
            }
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            completed = 0
            for future in concurrent.futures.as_completed(future_to_camera):
                camera = future_to_camera[future]
                completed += 1
                progress = 20 + int((completed / len(spherical_cameras)) * 40)
                update_progress(progress, 100, f"–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {camera.label} ({completed}/{len(spherical_cameras)})")
                
                try:
                    results = future.result()
                    all_camera_results.append(results)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –¥–ª—è {camera.label}: {e}")
                    all_camera_results.append({
                        'camera': camera,
                        'face_images': {},
                        'face_size_actual': None,
                        'error': str(e)
                    })
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    successful_results = [r for r in all_camera_results if not r['error'] and r['face_images']]
    total_faces_created = sum(len(r['face_images']) for r in successful_results)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {total_faces_created} –≥—Ä–∞–Ω–µ–π –∏–∑ {len(spherical_cameras)} –∫–∞–º–µ—Ä")
    
    # –≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–µ—Ä –≤ Metashape (60-75%)
    update_progress(60, 100, "–°–æ–∑–¥–∞–Ω–∏–µ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–µ—Ä –≤ Metashape...", stage_change=True)
    
    all_new_cameras = []
    for idx, result in enumerate(successful_results):
        progress = 60 + int((idx / len(successful_results)) * 15)
        update_progress(progress, 100, f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–µ—Ä –¥–ª—è {result['camera'].label}")
        
        try:
            new_cameras = create_cubemap_cameras_FIXED(
                chunk, 
                result['camera'], 
                result['face_images'], 
                result['face_size_actual'], 
                overlap
            )
            all_new_cameras.extend(new_cameras)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–µ—Ä –¥–ª—è {result['camera'].label}: {e}")
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(all_new_cameras)} –∫—É–±–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–µ—Ä –≤ Metashape")
    
    # –≠—Ç–∞–ø 6: –°–æ–∑–¥–∞–Ω–∏–µ COLMAP —Å—Ç—Ä—É–∫—Ç—É—Ä (75-90%)
    update_progress(75, 100, "–°–æ–∑–¥–∞–Ω–∏–µ COLMAP —Å—Ç—Ä—É–∫—Ç—É—Ä...", stage_change=True)
    
    for result in successful_results:
        if not result['face_images']:
            continue
            
        camera_center = result['camera'].center
        camera_center_np = np.array([camera_center.x, camera_center.y, camera_center.z])
        camera_transform = result['camera'].transform
        base_rotation = camera_transform.rotation()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä—ã —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
        face_size_actual = result['face_size_actual']
        effective_fov = 90 + overlap
        focal_length = face_size_actual / (2 * np.tan(np.radians(effective_fov / 2)))
        cx = cy = face_size_actual / 2.0
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞–º–µ—Ä—ã
        camera_key = (face_size_actual, face_size_actual, focal_length, cx, cy)
        
        if camera_key not in camera_params_to_id:
            camera_params_to_id[camera_key] = next_camera_id
            cameras_colmap[next_camera_id] = {
                'model': 'PINHOLE',
                'model_id': CAMERA_MODEL_IDS['PINHOLE'],
                'width': face_size_actual,
                'height': face_size_actual,
                'params': [focal_length, focal_length, cx, cy]
            }
            camera_id = next_camera_id
            next_camera_id += 1
        else:
            camera_id = camera_params_to_id[camera_key]
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–µ–π –¥–ª—è COLMAP
        face_directions_colmap = {
            'front': {'forward': np.array([0, 0, 1]), 'up': np.array([0, 1, 0]), 'right': np.array([1, 0, 0])},
            'back': {'forward': np.array([0, 0, -1]), 'up': np.array([0, 1, 0]), 'right': np.array([-1, 0, 0])},
            'right': {'forward': np.array([1, 0, 0]), 'up': np.array([0, 1, 0]), 'right': np.array([0, 0, -1])},
            'left': {'forward': np.array([-1, 0, 0]), 'up': np.array([0, 1, 0]), 'right': np.array([0, 0, 1])},
            'top': {'forward': np.array([0, 1, 0]), 'up': np.array([0, 0, -1]), 'right': np.array([1, 0, 0])},
            'down': {'forward': np.array([0, -1, 0]), 'up': np.array([0, 0, 1]), 'right': np.array([1, 0, 0])}
        }
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä–∞–Ω–∏
        for face_name, image_path in result['face_images'].items():
            if face_name not in face_directions_colmap:
                continue
                
            directions = face_directions_colmap[face_name]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–π –∫–∞–º–µ—Ä—ã
            base_rot_matrix = np.array([
                [base_rotation[0, 0], base_rotation[0, 1], base_rotation[0, 2]],
                [base_rotation[1, 0], base_rotation[1, 1], base_rotation[1, 2]],
                [base_rotation[2, 0], base_rotation[2, 1], base_rotation[2, 2]]
            ])
            
            world_forward = base_rot_matrix @ directions['forward']
            world_up = base_rot_matrix @ directions['up']
            world_right = base_rot_matrix @ directions['right']
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è COLMAP (camera-to-world)
            R_c2w = np.array([
                world_right,   # X-–æ—Å—å –∫–∞–º–µ—Ä—ã
                world_up,      # Y-–æ—Å—å –∫–∞–º–µ—Ä—ã  
                world_forward  # Z-–æ—Å—å –∫–∞–º–µ—Ä—ã
            ])
            
            # –ü–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã –¥–ª—è COLMAP
            tvec = -R_c2w @ camera_center_np
            qvec = rotation_matrix_to_quaternion(R_c2w)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ COLMAP —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            filename = os.path.basename(image_path)
            images_colmap[next_image_id] = {
                'qvec': qvec,
                'tvec': tvec.tolist(),
                'camera_id': camera_id,
                'name': filename,
                'xys': [],           # –ü—É—Å—Ç–æ–π –¥–ª—è 3DGS
                'point3D_ids': []    # –ü—É—Å—Ç–æ–π –¥–ª—è 3DGS
            }
            next_image_id += 1
    
    # –≠—Ç–∞–ø 7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ COLMAP —Ñ–∞–π–ª–æ–≤ (90-98%)
    update_progress(90, 100, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ COLMAP —Ñ–∞–π–ª–æ–≤...", stage_change=True)
    
    write_cameras_binary(cameras_colmap, os.path.join(sparse_folder, "cameras.bin"))
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ cameras.bin: {len(cameras_colmap)} –∫–∞–º–µ—Ä")
    
    update_progress(93, 100, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ images.bin...")
    write_images_binary(images_colmap, os.path.join(sparse_folder, "images.bin"))
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ images.bin: {len(images_colmap)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    update_progress(96, 100, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ points3D.bin...")
    write_points3D_binary(points3D, os.path.join(sparse_folder, "points3D.bin"))
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ points3D.bin: {len(points3D)} —Ç–æ—á–µ–∫")
    
    # –≠—Ç–∞–ø 8: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (98-100%)
    update_progress(98, 100, "–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    if successful_results:
        sample_result = successful_results[0]
        face_size_actual = sample_result['face_size_actual']
        effective_fov = 90 + overlap
        focal_length_actual = face_size_actual / (2 * np.tan(np.radians(effective_fov / 2)))
    else:
        face_size_actual = face_size or "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        effective_fov = 90 + overlap
        focal_length_actual = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    colored_points = sum(1 for p in points3D.values() if p['rgb'] != [128, 128, 128])
    color_ratio = colored_points / len(points3D) if points3D else 0
    
    with open(os.path.join(output_folder, "README_FIXED.txt"), "w", encoding='utf-8') as f:
        f.write("=== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≠–ö–°–ü–û–†–¢ –î–õ–Ø 3D GAUSSIAN SPLATTING ===\n\n")
        f.write("–≠—Ç–æ—Ç —ç–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú —Å–∫—Ä–∏–ø—Ç–æ–º unified_spherical_to_3dgs_FIXED.py\n\n")
        f.write("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:\n")
        f.write("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ü–∏–∏ —ç–∫–≤–∏—Ä–µ–∫—Ç–∞–Ω–≥—É–ª—è—Ä–Ω–æ–π -> –∫—É–±–∏—á–µ—Å–∫–∞—è\n")
        f.write("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä (–≤—Å–µ –≤ —Ü–µ–Ω—Ç—Ä–µ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–π –∫–∞–º–µ—Ä—ã)\n")
        f.write("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –≥—Ä–∞–Ω–µ–π –∫—É–±–∞\n") 
        f.write("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –æ–±–ª–∞–∫–∞ —Ç–æ—á–µ–∫\n")
        f.write("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Metashape\n\n")
        
        f.write("–°–¢–†–£–ö–¢–£–†–ê:\n")
        f.write("‚îú‚îÄ‚îÄ images/           # –ö—É–±–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥–µ–æ–º–µ—Ç—Ä–∏—è!)\n")
        f.write("‚îú‚îÄ‚îÄ sparse/0/         # COLMAP –¥–∞–Ω–Ω—ã–µ\n")
        f.write("‚îÇ   ‚îú‚îÄ‚îÄ cameras.bin   # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä –≥—Ä–∞–Ω–µ–π\n")
        f.write("‚îÇ   ‚îú‚îÄ‚îÄ images.bin    # –ü–†–ê–í–ò–õ–¨–ù–´–ï –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏\n")
        f.write("‚îÇ   ‚îî‚îÄ‚îÄ points3D.bin  # –¶–í–ï–¢–ù–û–ï —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ–µ –æ–±–ª–∞–∫–æ\n")
        f.write("‚îî‚îÄ‚îÄ README_FIXED.txt  # –≠—Ç–æ—Ç —Ñ–∞–π–ª\n\n")
        
        f.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
        f.write(f"- –ò—Å—Ö–æ–¥–Ω—ã—Ö —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–µ—Ä: {len(spherical_cameras)}\n")
        f.write(f"- –°–æ–∑–¥–∞–Ω–æ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –≥—Ä–∞–Ω–µ–π: {total_faces_created}\n")
        f.write(f"- –°–æ–∑–¥–∞–Ω–æ –∫–∞–º–µ—Ä –≤ Metashape: {len(all_new_cameras)}\n")
        f.write(f"- –¢–∏–ø–æ–≤ –∫–∞–º–µ—Ä –≤ COLMAP: {len(cameras_colmap)}\n")
        f.write(f"- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ COLMAP: {len(images_colmap)}\n")
        f.write(f"- 3D —Ç–æ—á–µ–∫ –≤ –æ–±–ª–∞–∫–µ: {len(points3D)}\n")
        f.write(f"- –¶–≤–µ—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫: {colored_points} ({color_ratio:.1%})\n\n")
        
        f.write("–ü–ê–†–ê–ú–ï–¢–†–´:\n")
        f.write(f"- –†–∞–∑–º–µ—Ä –≥—Ä–∞–Ω–µ–π: {face_size_actual}px\n")
        f.write(f"- –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: {overlap}¬∞\n")
        f.write(f"- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π FOV: {effective_fov}¬∞\n")
        f.write(f"- –§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {focal_length_actual:.2f}px\n" if isinstance(focal_length_actual, (int, float)) else f"- –§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {focal_length_actual}\n")
        f.write(f"- –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {file_format.upper()}\n")
        f.write(f"- –ö–∞—á–µ—Å—Ç–≤–æ: {quality}\n\n")
        
        f.write("–ì–û–¢–û–í–û –î–õ–Ø 3DGS:\n")
        f.write("python train.py -s /path/to/this/folder --model_path output/scene\n\n")
        
        f.write("–ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê:\n")
        if color_ratio > 0.7:
            f.write("‚úÖ –¶–≤–µ—Ç–Ω–æ—Å—Ç—å –æ–±–ª–∞–∫–∞ –æ—Ç–ª–∏—á–Ω–∞—è\n")
        elif color_ratio > 0.3:
            f.write("‚ö†Ô∏è  –¶–≤–µ—Ç–Ω–æ—Å—Ç—å –æ–±–ª–∞–∫–∞ –ø—Ä–∏–µ–º–ª–µ–º–∞—è\n")
        else:
            f.write("‚ùå –¶–≤–µ—Ç–Ω–æ—Å—Ç—å –æ–±–ª–∞–∫–∞ –Ω–∏–∑–∫–∞—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å—á–µ—Ç\n")
            
        f.write("‚úÖ –ì–µ–æ–º–µ—Ç—Ä–∏—è –≥—Ä–∞–Ω–µ–π –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò –ö–û–†–†–ï–ö–¢–ù–ê\n")
        f.write("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä –¢–û–ß–ù–û –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º\n")
        f.write("‚úÖ –í—Å–µ 6 –≥—Ä–∞–Ω–µ–π –∫—É–±–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã\n")
        f.write("‚úÖ –ì—Ä–∞–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ü–†–ê–í–ò–õ–¨–ù–´–ï –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n")
    
    update_progress(100, 100, "–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    print(f"\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —ç–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {output_folder}")
    print(f"üéØ –°–æ–∑–¥–∞–Ω–æ –≥—Ä–∞–Ω–µ–π: {total_faces_created}")
    print(f"üì∑ –°–æ–∑–¥–∞–Ω–æ –∫–∞–º–µ—Ä –≤ Metashape: {len(all_new_cameras)}")
    print(f"üé® –¢–æ—á–µ–∫ –æ–±–ª–∞–∫–∞: {len(points3D)} ({color_ratio:.1%} —Ü–≤–µ—Ç–Ω—ã—Ö)")
    print(f"‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´ - –≥–æ—Ç–æ–≤–æ –¥–ª—è 3D Gaussian Splatting!")
    
    return True

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø GUI ===
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å GUI –¥–∏–∞–ª–æ–≥–∞–º–∏"""
    doc = Metashape.app.document
    chunk = doc.chunk
    
    if not chunk:
        Metashape.app.messageBox("‚ùå –û—à–∏–±–∫–∞: –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–º–µ—Ä
    cube_faces_suffixes = ["_front", "_right", "_left", "_top", "_down", "_back"]
    spherical_cameras = []
    existing_cube_cameras = []
    
    for cam in chunk.cameras:
        if cam.transform and cam.photo and cam.enabled:
            is_cube_face = any(cam.label.endswith(suffix) for suffix in cube_faces_suffixes)
            if is_cube_face:
                existing_cube_cameras.append(cam)
            else:
                spherical_cameras.append(cam)
    
    if not spherical_cameras:
        Metashape.app.messageBox(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–µ—Ä!\n\n"
            "üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–æ."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    info_msg = f"üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è 3D Gaussian Splatting\n\n"
    info_msg += f"üîß –í–°–ï –ë–ê–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–´:\n"
    info_msg += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ü–∏–∏\n"
    info_msg += f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä\n"
    info_msg += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –≥—Ä–∞–Ω–µ–π\n"
    info_msg += f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –æ–±–ª–∞–∫–∞\n\n"
    info_msg += f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä:\n"
    info_msg += f"üî¥ –°—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö: {len(spherical_cameras)} (–±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã)\n"
    
    if existing_cube_cameras:
        info_msg += f"üü¶ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—É–±–∏—á–µ—Å–∫–∏—Ö: {len(existing_cube_cameras)} (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã)\n"
    
    info_msg += f"\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    
    if not Metashape.app.getBool(info_msg):
        return
    
    # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    output_folder = Metashape.app.getExistingDirectory("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û —ç–∫—Å–ø–æ—Ä—Ç–∞")
    if not output_folder:
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    overlap = Metashape.app.getFloat("–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –≥—Ä–∞–Ω–µ–π (–≥—Ä–∞–¥—É—Å—ã):", 10.0)
    if overlap is None:
        overlap = 10.0
    
    # –†–∞–∑–º–µ—Ä –≥—Ä–∞–Ω–µ–π
    try:
        size_choice = Metashape.app.getInt(
            "–†–∞–∑–º–µ—Ä –≥—Ä–∞–Ω–µ–π:\n1 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n2 - 1024px\n3 - 2048px\n4 - 4096px", 
            1, 1, 4
        )
    except:
        size_choice = 1
    
    face_size = None
    if size_choice == 2:
        face_size = 1024
    elif size_choice == 3:
        face_size = 2048
    elif size_choice == 4:
        face_size = 4096
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –æ–±–ª–∞–∫–∞
    max_points = 50000
    if chunk.tie_points and len(chunk.tie_points.points) > max_points:
        limit_msg = f"‚ö†Ô∏è  –û–±–ª–∞–∫–æ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(chunk.tie_points.points)} —Ç–æ—á–µ–∫.\n"
        limit_msg += f"–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ {max_points} –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞?"
        
        if Metashape.app.getBool(limit_msg):
            max_points = max_points
        else:
            max_points = None
    else:
        max_points = None
    
    # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å
    cpu_count = os.cpu_count() or 1
    camera_threads = min(len(spherical_cameras), max(1, cpu_count // 2))
    face_threads = min(6, cpu_count)
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    final_msg = f"üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û —ç–∫—Å–ø–æ—Ä—Ç–∞:\n\n"
    final_msg += f"üìÅ –ü–∞–ø–∫–∞: {output_folder}\n"
    final_msg += f"üî¥ –°—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞–º–µ—Ä: {len(spherical_cameras)}\n"
    final_msg += f"üéØ –û–∂–∏–¥–∞–µ—Ç—Å—è –≥—Ä–∞–Ω–µ–π: {len(spherical_cameras) * 6}\n"
    final_msg += f"üìê –†–∞–∑–º–µ—Ä –≥—Ä–∞–Ω–µ–π: {'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏' if face_size is None else f'{face_size}px'}\n"
    final_msg += f"üîÑ –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: {overlap}¬∞\n"
    final_msg += f"üé® –¢–æ—á–µ–∫ –æ–±–ª–∞–∫–∞: {len(chunk.tie_points.points) if chunk.tie_points else 0}"
    if max_points:
        final_msg += f" (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ {max_points})"
    final_msg += f"\nüßµ –ü–æ—Ç–æ–∫–æ–≤: {camera_threads} –∫–∞–º–µ—Ä / {face_threads} –≥—Ä–∞–Ω–µ–π\n"
    final_msg += f"üíæ –§–æ—Ä–º–∞—Ç: JPEG 95%\n\n"
    final_msg += f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:\n"
    final_msg += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ü–∏–∏\n"
    final_msg += f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∫–∞–º–µ—Ä\n"
    final_msg += f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –æ–±–ª–∞–∫–∞\n"
    final_msg += f"‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è 3D Gaussian Splatting\n\n"
    final_msg += f"–ó–∞–ø—É—Å—Ç–∏—Ç—å –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ –æ–±—Ä–∞–±–æ—Ç–∫—É?"
    
    if not Metashape.app.getBool(final_msg):
        return
    
    # –ó–∞–ø—É—Å–∫ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–∏
    progress = ProgressTracker("FIXED Spherical to 3DGS")
    
    try:
        success = process_spherical_to_cubemap_3dgs_FIXED(
            chunk=chunk,
            output_folder=output_folder,
            face_size=face_size,
            overlap=overlap,
            file_format="jpg",
            quality=95,
            max_points=max_points,
            face_threads=face_threads,
            camera_threads=camera_threads,
            progress_tracker=progress
        )
        
        if success:
            elapsed = time.time() - progress.start_time
            success_msg = f"üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —ç–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            success_msg += f"‚è±Ô∏è –í—Ä–µ–º—è: {elapsed/60:.1f} –º–∏–Ω\n"
            success_msg += f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {output_folder}\n\n"
            success_msg += f"üîß –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´:\n"
            success_msg += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è –≥—Ä–∞–Ω–µ–π\n"
            success_msg += f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä\n"
            success_msg += f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –æ–±–ª–∞–∫–∞\n"
            success_msg += f"‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è 3D Gaussian Splatting\n\n"
            success_msg += f"üí° –°–º. README_FIXED.txt –¥–ª—è –¥–µ—Ç–∞–ª–µ–π\n\n"
            success_msg += f"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ 3DGS:\n"
            success_msg += f"python train.py -s \"{output_folder}\" --model_path output/scene"
            
            Metashape.app.messageBox(success_msg)
        else:
            Metashape.app.messageBox("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        print(error_msg)
        import traceback
        print(traceback.format_exc())
        Metashape.app.messageBox(error_msg)

if __name__ == "__main__":
    main()